# README ‚Äî Base de Datos **mydb** (Aerol√≠nea)

> Base orientada a operaci√≥n de aerol√≠nea: identidad & accesos, datos personales, geograf√≠a de aeropuertos, flota, rutas, programaci√≥n y operaci√≥n de vuelos, y tarifas por cabina.

---

## ‚ñë‚ñë 1) ESTRUCTURA GENERAL (M√ìDULOS) ‚ñë‚ñë
> Mapa mental por √°reas con tablas clave.

### üîê Identidad & Accesos
- **persona**: entidad base para individuos (pasajeros, empleados, etc.).
- **usuario**: cuenta de acceso asociada a una *persona* y a un *rol*.
- **rol**, **permiso**, **rol_permiso**: control de acceso basado en roles y permisos (RBAC).

---

### üë§ Datos personales
- **direccion**, **telefono**, **documentacion**: info de contacto y documentos de la *persona*.

---

### üåç Geograf√≠a & Aeropuertos
- **pais**: cat√°logo de pa√≠ses.  
- **aeropuerto**: aeropuertos por pa√≠s.  
- **terminal**: terminales por aeropuerto.  
- **puerta**: puertas dentro de una terminal.

---

### ‚úàÔ∏è Flota & Configuraci√≥n
- **modelo_aeronave**: cat√°logo t√©cnico (fabricante, capacidades).  
- **configuracion_cabina**: plantilla por modelo (filas y asientos por fila).  
- **aeronave**: aeronaves f√≠sicas (matr√≠cula) asociadas a *modelo_aeronave*.  
- **asiento**: plano f√≠sico de asientos por *aeronave*.

---

### üó∫Ô∏è Red de Rutas & Operaci√≥n
- **ruta**: tramos origen‚Üídestino (aeropuerto‚Üîaeropuerto).  
- **vuelo_programado**: patr√≥n (c√≥digo, frecuencia, horas) sobre una *ruta*.  
- **vuelo**: instancia operativa (por fecha), con puerta de salida/llegada y aeronave asignada.

---

### üíµ Comercial & Precios
- **tarifa**: precio base por *ruta* y *clase* (cabina), con vigencia y cargos/impuestos simples.

---

## ‚ñë‚ñë 2) ORDEN SUGERIDO DE EJECUCI√ìN ‚ñë‚ñë
> Ejecuta los `.sql` en este orden para crear el esquema completo.

Esquema: 00_schema.sql
Cat√°logos base: pais.sql
Identidad & Accesos: persona.sql, rol.sql, permiso.sql, rol_permiso.sql, usuario.sql
Geograf√≠a: aeropuerto.sql, terminal.sql, puerta.sql
Flota: modelo_aeronave.sql, configuracion_cabina.sql, aeronave.sql, asiento.sql
Red & Operaci√≥n: ruta.sql, vuelo_programado.sql, vuelo.sql
Comercial: tarifa.sql
Finalizaci√≥n: 99_finalize.sql

> Cada archivo ya incluye `USE mydb;` y `DROP TABLE IF EXISTS ...` para facilitar iteraciones.

---

## ‚ñë‚ñë 3) RELACIONES CLAVE (VISI√ìN R√ÅPIDA) ‚ñë‚ñë

- **usuario** ‚Üí **persona**, **rol**  
- **rol_permiso**: many-to-many entre **rol** y **permiso**  
- **aeropuerto** ‚Üí **pais** ‚Üí **usuario** *(auditor√≠a)*  
- **terminal** ‚Üí **aeropuerto** ‚Üí **puerta**  
- **aeronave** ‚Üí **modelo_aeronave**  
- **asiento** ‚Üí **aeronave**  
- **configuracion_cabina** ‚Üí **modelo_aeronave**  
- **ruta** ‚Üí **aeropuerto** *(origen/destino)*  
- **vuelo_programado** ‚Üí **ruta**  
- **vuelo** ‚Üí **vuelo_programado**, **aeronave**, **puerta** *(salida/llegada)*  
- **tarifa** ‚Üí **ruta**

---

## ‚ñë‚ñë 4) CASOS DE USO T√çPICOS ‚ñë‚ñë

### A) Agregar un **nuevo avi√≥n** (aeronave)
1. *(Opcional)* Crear/validar **modelo_aeronave** (p. ej., ‚ÄúA320‚Äù).
2. Insertar en **aeronave**: matr√≠cula, fecha de alta, estado, `modelo_aeronave_id`.
3. Generar plano en **asiento**:
   - Basado en **configuracion_cabina** del modelo.
   - Insertar por cabina: `cabina`, `fila`, `columna`, `codigo_asiento`, flags *(bulkhead/salida)*.  
**Resultado:** la aeronave puede asignarse a un **vuelo** operativo.

---

### B) Crear un **nuevo usuario**
1. Crear **persona** *(nombre, apellido)*.  
2. Crear **usuario**: `email`, `password_hash`, `passwrod_algo` *(sic)*, verificaci√≥n; asociar `rol_idrol` + `persona_idpersona`.  
3. *(Opcional)* Asignar permisos al rol v√≠a **rol_permiso**.  
**Resultado:** el usuario puede autenticarse y operar seg√∫n su rol.

---

### C) Definir una **nueva ruta** y **programar vuelos**
1. **ruta**: `origen_aeropuerto`, `destino_aeropuerto`, distancia/tiempo estimado.  
2. **vuelo_programado**: `codigo_vuelo`, `frecuencia` (p. ej., ‚ÄúL-M-X-J-V‚Äù), `hora_salida`/`hora_llegada`, `ruta_idruta`.  
3. *(Opcional)* **tarifa** por *ruta* y *clase* *(economica/ejecutivo/primera)*.  
**Resultado:** patrones listos para generar/operar instancias diarias.

---

### D) Operar un **nuevo vuelo** en una fecha concreta
1. **vuelo**:
   - `vuelo_programado_idvuelo_programado`, `fecha_operacion`  
   - `aeronave_idaeronave`  
   - `puerta_salida_idpuerta` *(y `puerta_llegada_idpuerta` si aplica)*  
2. Actualizar tiempos (`std/sta`, luego `etd/eta`, `atd/ata`) y `estado`.  
**Resultado:** vuelo publicado/operativo con infraestructura y equipo.

---

### E) **Nueva reserva** *(estado actual del esquema)*
> A√∫n no hay tablas de reservas/boletos/segmentos. Propuesta m√≠nima para futuro:

- **reserva** *(PNR)*: id, localizador, `persona_contacto_id`, estado, `creado_en`, etc.  
- **reserva_item** / **segmento_reserva**: vincula *reserva* ‚Üî *vuelo* (uno por tramo):
  - `pasajero_idpersona`, `clase` (enum), `tarifa_id` *(opcional)*,  
  - `asiento_id` *(nullable hasta seat map)*, `estado` *(reservado/emitido/cancelado)*.  
- **pago** *(simple)*: `reserva_id`, monto, moneda, m√©todo, estado, timestamps.

> Con esto: crear reserva, cotizar con **tarifa** seg√∫n *ruta/clase*, emitir pago y **asignar asiento** por segmento.

---

### F) **Asignar un pasajero a un vuelo** *(estado actual del esquema)*
> No hay tabla de cruce *persona‚Üîvuelo*. Propuesta m√≠nima:

- **pasajero_vuelo**:  
  - `vuelo_id` *(FK)*, `persona_id` *(FK)*  
  - `asiento_id` *(FK a **asiento**, opcional hasta la asignaci√≥n)*  
  - `clase`, `estado_embarque` *(check-in, embarcado)*, timestamps.  

Hasta agregar estas tablas, la asignaci√≥n no queda persistida.

---

## ‚ñë‚ñë 5) EST√ÅNDARES, AUDITOR√çA Y BORRADO L√ìGICO ‚ñë‚ñë
- Auditor√≠a en la mayor√≠a de tablas: `creado_en`, `actualizado_en`, `eliminado_en` + `*_por` *(FK a **usuario**)*.  
- Se favorece **borrado l√≥gico** (`eliminado_en` + motivo) para preservar historia.  
- Booleanos como `TINYINT` *(0/1)*.

---

## ‚ñë‚ñë 6) NOTAS Y LIMITACIONES CONOCIDAS ‚ñë‚ñë

**Typos conservados** *(para no romper DDL actual)*:
- `mdoelo` en **modelo_aeronave**  
- `timepo_estimado` en **ruta**  
- `es_whatssap` en **telefono**  
- `passwrod_algo` en **usuario**

**√çndices a revisar**:
- **asiento**: `UNIQUE` independientes en `cabina`, `fila`, `columna`. Suele convenir  
  `UNIQUE (aeronave_idaeronave, cabina, fila, columna)`.
- **ruta**: `UNIQUE (origen_aeropuerto)`; en producci√≥n se usa t√≠picamente  
  `UNIQUE (origen_aeropuerto, destino_aeropuerto)`.

**FK inv√°lida**:
- En **rol_permiso**: `fk_rol_permiso_eliminado_por` sin columnas (deber√≠a apuntar a `usuario(idusuario)`).

**Reservas no modeladas**:
- Falta PNR/boletos/pagos/segmentos/asignaci√≥n de asiento por pasajero (ver propuestas en ¬ß4E‚Äì4F).

---

## ‚úÖ Checklist de pr√≥ximos pasos
- [ ] Agregar m√≥dulo de **reservas** *(PNR, segmentos, pagos, pasajero_vuelo)*.  
- [ ] Ajustar **√≠ndices √∫nicos** en `asiento` y `ruta`.  
- [ ] Corregir FK en `rol_permiso`.  
- [ ] Considerar `utf8mb4` y defaults de timestamps donde aplique.

---

> **Listo:** Con esto ten√©s una gu√≠a clara para navegar el esquema, ejecutarlo por m√≥dulos y operar los flujos m√°s comunes (alta de flota, programaci√≥n/operaci√≥n de vuelos, usuarios y tarifas).
