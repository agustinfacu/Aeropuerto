# ‚úàÔ∏è Base de Datos - Sistema de Gesti√≥n de Vuelos

> **Proyecto:** Aerol√≠nea - Sistema de Reservas y Operaciones  
> **Tecnolog√≠a:** MySQL 8.x  
> **Autor:** Agust√≠n Tejero  
> **Esquema principal:** `mydb`  
> **Modo de desarrollo:** Modelo Entidad‚ÄìRelaci√≥n normalizado (3FN), con control de auditor√≠a y referencias cruzadas.

---

## üìò Resumen General

Este modelo de base de datos implementa la estructura fundamental de un **sistema de gesti√≥n de vuelos comerciales**, permitiendo administrar:

- Identidad y autenticaci√≥n de usuarios.  
- Roles y permisos.  
- Datos personales, documentaci√≥n y contacto de pasajeros.  
- Infraestructura aeroportuaria (pa√≠ses, aeropuertos, terminales, puertas).  
- Flota de aeronaves y sus modelos.  
- Rutas, tarifas, promociones y vuelos.  
- Reservas, boletos y control de asientos por vuelo.  

Cada tabla mantiene **auditor√≠a completa** (`creado_por`, `actualizado_por`, `eliminado_por`, `*_en`) para trazabilidad, adem√°s de **control de eliminaci√≥n l√≥gica** mediante `eliminado_en`.

---

## üóÇÔ∏è Listado de Tablas Principales

| **M√≥dulo**                   | **Tabla**                | **Descripci√≥n breve** |
|------------------------------|---------------------------|------------------------|
| **Seguridad y Accesos**      | `usuario`                | Cuentas del sistema (email, hash, bloqueo, verificaci√≥n). |
|                              | `rol`                    | Roles base (Administrador, Piloto, Pasajero, etc.). |
|                              | `permiso`                | Acciones permitidas en el sistema. |
|                              | `rol_permiso`            | Asignaci√≥n de permisos a roles. |
| **Identidad Personal**       | `persona`                | Datos b√°sicos (nombre, apellido). |
|                              | `direccion`              | Domicilios vinculados a personas. |
|                              | `telefono`               | Tel√©fonos personales o laborales. |
|                              | `documentacion`          | Documentos de identidad (DNI, pasaporte, etc.). |
| **Geograf√≠a y Aeropuertos**  | `pais`                   | Cat√°logo ISO de pa√≠ses. |
|                              | `aeropuerto`             | Aeropuertos y coordenadas. |
|                              | `terminal`               | Terminales dentro de un aeropuerto. |
|                              | `puerta`                 | Puertas de embarque. |
| **Flota y Configuraci√≥n**    | `modelo_aeronave`        | Modelos t√©cnicos de aeronaves. |
|                              | `configuracion_cabina`   | Plantillas de disposici√≥n de asientos por clase. |
|                              | `aeronave`               | Aeronaves registradas y su estado operativo. |
|                              | `asiento`                | Asientos f√≠sicos dentro de una aeronave. |
| **Operaci√≥n y Tarifas**      | `ruta`                   | Tramos origen‚Äìdestino. |
|                              | `tarifa`                 | Tarifas por clase y vigencia. |
|                              | `promocion`              | Descuentos o condiciones especiales sobre tarifas. |
| **Operaciones de Vuelo**     | `vuelo`                  | Programaci√≥n de vuelos con aeronave y ruta. |
|                              | `asiento_vuelo`          | Estado (libre/reservado/etc.) de asientos por vuelo. |
| **Reservas y Ventas**        | `reserva`                | Encabezado de reservas, totales y estado. |
|                              | `reserva_persona`        | Pasajeros dentro de una reserva. |
|                              | `boleto`                 | Boleto emitido por pasajero y vuelo. |


---

## üîÑ Caso de Uso T√≠pico

### üß© Flujo completo de una operaci√≥n

1. **Autenticaci√≥n**  
   Un `usuario` inicia sesi√≥n seg√∫n su `rol` (pasajero, agente, admin).

2. **Gesti√≥n de datos personales**  
   El usuario vincula su `persona`, `direccion`, `telefono` y `documentacion`.

3. **B√∫squeda de vuelos**  
   El cliente consulta rutas (`ruta`) disponibles y vuelos (`vuelo`) activos.

4. **Selecci√≥n de vuelo y clase**  
   Se visualizan tarifas (`tarifa`) y posibles promociones (`promocion`).

5. **Reserva de asiento**  
   Se crea una `reserva` asociando el `usuario`, la `tarifa` y la `promocion`.  
   Cada pasajero se guarda en `reserva_persona` con su `documentacion`.

6. **Asignaci√≥n de asiento**  
   Se consulta `asiento_vuelo` para marcar el asiento como `RESERVADO`.

7. **Emisi√≥n de boleto**  
   Se genera un registro en `boleto` con estado `EMITIDO`, vinculando vuelo, pasajero y asiento.

8. **Auditor√≠a**  
   Todas las operaciones registran `creado_por`, `actualizado_por` y timestamps (`*_en`).

---

## ‚öôÔ∏è Detalles T√©cnicos

### üîë Claves y relaciones

- Todas las tablas poseen `PRIMARY KEY` autoincremental (`INT AUTO_INCREMENT`).  
- Las relaciones se implementan mediante `FOREIGN KEY` con `ON DELETE NO ACTION` (salvo en `persona` y `direccion`, que usan `SET NULL` para preservar registros hist√≥ricos).  
- √çndices √∫nicos en:
  - `usuario.email_norm`
  - `pais.tag`
  - `aeropuerto.tag`
  - `aeronave.matricula`
  - `tarifa.nombre`
  - `reserva.codigo_reserva`

### üìÖ Control temporal

Cada registro incorpora:
- `creado_en`, `actualizado_en`, `eliminado_en`
- Campos complementarios de autor√≠a (`creado_por`, etc.)
  
Esto permite reconstruir la historia completa de modificaciones sin perder trazabilidad.

---

## üßÆ Ejemplo de consulta t√≠pica

```sql
-- Consultar vuelos activos con su ruta y aeronave
SELECT 
    v.idvuelo,
    v.codigo_publico,
    a.nombre AS aeropuerto_salida,
    r.distancia_km,
    ma.fabricante,
    ma.mdoelo AS modelo
FROM vuelo v
JOIN ruta r ON v.ruta_idruta = r.idruta
JOIN aeropuerto a ON v.aeropuerto_idaeropuerto = a.idaeropuerto
JOIN aeronave ae ON v.aeronave_idaeronave = ae.idaeronave
JOIN modelo_aeronave ma ON ae.modelo_aeronave_idmodelo_aeronave = ma.idmodelo_aeronave
WHERE v.estado IN ('PROGRAMADO', 'ABORDANDO');
